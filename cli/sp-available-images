#!/usr/bin/env groovy

import groovy.json.JsonSlurper

class Image {
 
  def name
  def imageId
  def provides = ""
  def requires = ""
}

def getJsonFromDockerApi(String getline) {
  def proc = ['/bin/bash', '-c', "echo -e \"${getline}\r\n\" | nc -U /var/run/docker.sock"].execute().text

  def jsonText

  if(proc.indexOf("[") > 0 && proc.indexOf("[") < proc.indexOf("{")) {
    jsonText = proc.substring(proc.indexOf("["))
    //println "JSON = ${jsonText}"
  } else {
    jsonText = proc.substring(proc.indexOf("{"))
  }

  new JsonSlurper().parseText(jsonText)
}

def getParsedData(image) {

  def json = getJsonFromDockerApi("GET /images/${image.imageId}/json HTTP/1.0")

  def envVars = json.container_config.Env

  def requires = envVars.find { it.toLowerCase().startsWith("requires") }
  def provides = envVars.find { it.toLowerCase().startsWith("provides") }

  if (provides) {
    image.provides=provides?.split("=")[1]
  }
  if (requires) {
    image.requires=requires?.split("=")[1]
  }
  return requires || provides
}

def getAvailableServices() {
  def images = getJsonFromDockerApi("GET /images/json HTTP/1.0")

  imageData = images.collect {
      new Image(name: it.RepoTags[0][0..it.RepoTags[0].lastIndexOf(":")-1], imageId:it.Id)
      //if (getParsedData(image)) {
      //  imageData<<image 
      //}
  }.findAll {
    getParsedData(it)
  }

  return imageData
}

availableServices.each {
  println "${it.name} [${it.imageId}] : provides[${it.provides}], requires[${it.requires}]"

}
//println "Available: ${availableServices}"